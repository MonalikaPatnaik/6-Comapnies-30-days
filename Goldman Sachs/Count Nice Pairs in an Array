Leetcode 1814. Count Nice Pairs in an Array

You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:

0 <= i < j < nums.length
nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

Code:

class Solution {
public:
    int c=0;
   int rev(int n){
        if(n%10==n)return n;
       // string r="";
       int r=0;
       while(n){
           // r+=to_string(n%10);
           r=r*10+(n%10);
           n=n/10;
       }
       return r;
    }
    
    int countNicePairs(vector<int>& nums)
    {  
        int m=(1e9 +7);
     unordered_map<int,int>mp;
        for(auto e:nums){
            int diff=e-rev(e);
            if(mp.find(diff)!=mp.end()){
                c=(c+mp[diff])%m;
                mp[diff]++;
            }
            else mp[diff]++;
        }
    return c;
    }
   
};
